#!/usr/bin/env python3
"""
Pruebas del AI Engine v6.0
"""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

async def test_functionality():
    """Probar funcionalidad"""
    print("üß™ PROBANDO AI ENGINE v6.0")
    print("=" * 40)
    
    try:
        # Test 1: Importar motor
        print("\n1Ô∏è‚É£ Importando motor...")
        from models.llm_hybrid_engine import HybridLLMEngine
        print("‚úÖ Motor importado")
        
        # Test 2: Inicializar
        print("\n2Ô∏è‚É£ Inicializando...")
        engine = HybridLLMEngine()
        await engine.initialize()
        print("‚úÖ Motor inicializado")
        
        # Test 3: Estado
        print("\n3Ô∏è‚É£ Verificando estado...")
        is_ready = engine.is_ready()
        print(f"‚úÖ Listo: {is_ready}")
        
        # Test 4: Health check
        print("\n4Ô∏è‚É£ Health check...")
        health = await engine.health_check()
        print(f"‚úÖ Estado: {health['status']}")
        
        # Test 5: Modelos
        print("\n5Ô∏è‚É£ Modelos disponibles...")
        models = await engine.get_available_models()
        print(f"‚úÖ Locales: {len(models['local'])}")
        print(f"‚úÖ Cloud: {len(models['cloud'])}")
        
        # Test 6: Generaci√≥n
        print("\n6Ô∏è‚É£ Probando generaci√≥n...")
        result = await engine.generate_text("Hola mundo")
        print(f"‚úÖ Respuesta: {result['response'][:50]}...")
        print(f"‚úÖ Motor: {result['engine']}")
        
        # Test 7: An√°lisis
        print("\n7Ô∏è‚É£ Probando an√°lisis...")
        sentiment = await engine.analyze_sentiment("Me gusta esto")
        print(f"‚úÖ Sentimiento: {sentiment['sentiment']}")
        
        # Test 8: Estad√≠sticas
        print("\n8Ô∏è‚É£ Estad√≠sticas...")
        stats = await engine.get_stats()
        print(f"‚úÖ Requests: {stats['requests_total']}")
        print(f"‚úÖ Success rate: {stats['success_rate']:.1f}%")
        
        # Cleanup
        await engine.cleanup()
        
        print("\n" + "=" * 40)
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("=" * 40)
        print("\nüöÄ Siguiente paso:")
        print("   uvicorn app:app --host 0.0.0.0 --port 8001")
        print("\nüåê URLs:")
        print("   ‚Ä¢ API: http://localhost:8001")
        print("   ‚Ä¢ Docs: http://localhost:8001/docs")
        print("   ‚Ä¢ Health: http://localhost:8001/health")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_functionality())
    sys.exit(0 if success else 1)
